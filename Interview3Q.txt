Basic Python:
=============
- do they know a tuple/list/dict when they see it?
tuple = immutable list can be used for read only config
list = used for almost everythin 
dict = hashset with key value pair
set = immutable without duplicates

- when to use list vs. tuple vs. dict. vs. set

- can they use list comprehensions (and know when not to
   abuse them? :)

- can they use tuple unpacking for assignment?

def ret3num():
  return tuple(range(3))
  x,y,z = ret3num()


- string building...do they use "+=" or do they build a list
   and use .join() to recombine them efficiently

   .join is faster

- truth-value testing questions and observations (do they
   write "if x == True" or do they just write "if x")

   if x is better

- basic file-processing (iterating over a file's lines)

with open('sim.txt','rt') as f:
for i in f:
print i 


- basic understanding of exception handling

Here are few important points about the above-mentioned syntax:
    A single try statement can have multiple except statements. This is useful when the try block contains statements that may throw different types of exceptions.
    You can also provide a generic except clause, which handles any exception.
    After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception.
    The else-block is a good place for code that does not need the try: block's protection.



Broader Basic Python:
=====================
- questions about the standard library ("do you know if
   there's a standard library for doing X?", or "in which
   library would you find [common functionality Y]?")  Most
   of these are related to the more common libraries such as
   os/os.path/sys/re/itertools

- questions about iterators/generators

- questions about map/reduce/sum/etc family of functions


- questions about "special" methods (__<foo>__)

More Advanced Python:
=====================
- can they manipulate functions as first-class objects
   (Python makes it easy, but do they know how)


   def friend(func):
    def retme(i,j):
      print "WAssup"
      return func(i,j)
    return retme


  @friend
  def sum(i,j):
    return i+j

- more detailed questions about the std. libraries (such as
   datetime/email/csv/zipfile/networking/optparse/unittest)

- questions about testing (unittests/doctests)



- questions about docstrings vs. comments, and the "Why" of
   them


- more detailed questions about regular expressions

- questions about mutability

- keyword/list parameters and unpacked kwd args

*uppacks list **unpacks dict

- questions about popular 3rd-party toolkits (BeautifulSoup,
   pyparsing...mostly if they know about them and when to use
   them, not so much about implementation details)

- questions about monkey-patching

A MonkeyPatch is a piece of Python code which extends or modifies other code at runtime (typically at startup).
A simple example looks like this:
from SomeOtherProduct.SomeModule import SomeClass

def speak(self):
    return "ook ook eee eee eee!"

SomeClass.speak = speak

- questions about PDB

- questions about properties vs. getters/setters
property(fget=None, fset=None, fdel=None, doc=None)


class Celsius:
    def __init__(self, temperature = 0):
        self.temperature = temperature

    def to_fahrenheit(self):
        return (self.temperature * 1.8) + 32

    def get_temperature(self):
        print("Getting value")
        return self._temperature

    def set_temperature(self, value):
        if value < -273:
            raise ValueError("Temperature below -273 is not possible")
        print("Setting value")
        self._temperature = value

    temperature = property(get_temperature,set_temperature)


- questions about classmethods, staticmethods


- questions about scope/name-resolution

- use of lambda

In [51]: y = lambda x:x*x

In [52]: y(2)
Out[52]: 4


Python History:
===============
- decorators added in which version?
decorators added in 2.5 along with generator expressions

- "batteries included" SQL-capible DB in which version?

- the difference between "class Foo" and "class Foo(object)"

- questions from "import this" about pythonic code





easy/intermediate

    What are Python decorators and how would you use them?
    How would you setup many projects where each one uses different versions of Python and third party libraries?
    What is PEP8 and do you follow its guidelines when you're coding?
    
    How are arguments passed – by reference of by value? (easy, but not that easy, I'm not sure if I can answer this clearly)
    Combination of both : for immutable its call by value as son as u assign new value to var new memory is allocated.
    for mutable like list its by reference if u make operations like shallow copy else it acts as call by value.
    BAsically this behaviour is called as pass by object reference.

    Do you know what list and dict comprehensions are? Can you give an example?
    dict comprehencsion
    {'sim'+str(i):i+2 for i in range(10)}

    Show me three different ways of fetching every third item in the list
    for i in l[::3]:
      print i 


    Do you know the difference between range and xrange?
    range provides as a list 
    xrange as a generator when its required .. memory effcient

    Tell me a few differences between Python 2.x and 3.x?


    The with statement and its usage.
    context manager can be used to effectively close down resources when the eecution does out of scope

    what's wrong with import all?
    might lead to clashes if two methods are of same name

    Why is the GIL important? (This actually puzzles me, don't know the answer)
    Global INterpreter Lock : when python interpreter is executing the code a lock is places on tat aprticular main thread and at that point within the same interpreter no other thread can execute unless it gets the lock  on itself. Mind that when the code is waiting for I/O or is executing c/c++ extensions this lock is released

    What are "special" methods (<foo>), how they work, etc
    can you manipulate functions as first-class objects?
    the difference between "class Foo" and "class Foo(object)"

tricky, smart ones

    how to read a 8GB file in python? : use yield
    
    what don't you like about Python? : slower than java but bwing dynamic tats how it is

    can you convert ascii characters to an integer without using built in methods like string.atoi or int()? curious one

subjective ones

    do you use tabs or spaces, which ones are better? tabs and morover my IDE does that for me





How are arguments passed – by reference of by value?
The short answer is “neither”, actually it is called “call by object” or “call by sharing”(you can check here for more info). The longer one starts with the fact that this terminology is probably not the best one to describe how Python works. In Python everything is an object and all variables hold references to objects. The values of these references are to the functions. As result you can not change the value of the reference but you can modify the object if it is mutable. Remember numbers, strings and tuples are immutable, list and dicts are mutable.
Do you know what list and dict comprehensions are? Can you give an example?
List/Dict comprehensions are syntax constructions to ease the creation of a list/dict based on existing iterable. According to the 3rd edition of “Learning Python” list comprehensions are generally faster than normal loops but this is something that may change between releases. Examples:

   
# simple iteration
a = []
for x in range(10):
    a.append(x*2)
# a == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
 
# list comprehension
a = [x*2 for x in range(10)]
 
# dict comprehension
a = {x: x*2 for x in range(10)}
# a == {0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18}
What is PEP 8?
PEP 8 is a coding convention(a set of recommendations) how to write your Python code in order to make it more readable and useful for those after you. For more information check PEP 8.
Do you use virtual environments?
I personally and most(by my observation) of the Python developers find the virtual environment tool extremely useful. Yeah, probably you can live without it but this will make the work and support of multiple projects that requires different package versions a living hell.
Can you sum all of the elements in the list, how about to multuply them and get the result?

# the basic way
s = 0
for x in range(10):
    s += x
 
# the right way
s = sum(range(10))
 
 
# the basic way
s = 1
for x in range(1, 10):
    s = s * x
 
# the other way
from operator import mul
reduce(mul, range(1, 10)) #reduce uses the result of first call of functions and uses it as arg for next call.

First list are mutable while tuples are not, and second tuples can be hashed e.g. to be used as keys for dictionaries. As an example of their usage, tuples are used when the order of the elements in the sequence matters e.g. a geographic coordinates, “list” of points in a path or route, or set of actions that should be executed in specific order. Don’t forget that you can use them a dictionary keys. For everything else use lists.

Range returns a list while xrange returns a generator xrange object which takes the same memory no matter of the range size. In the first case you have all items already generated(this can take a lot of time and memory) while in the second you get the elements one by one e.g. only one element is generated and available per iteration. Simple example of generator usage can be find in the problem 2 of the “homework” for my presentation Functions in Python

Tell me a few differences between Python 2.x and 3.x

unicode if default in 3 , str is defualt in 2
print is function in 3 
There are many answers here but for me some of the major changes in Python 3.x are: all strings are now Unicode, print is now function not a statement. There is no range, it has been replaced by xrange which is removed. All classes are new style and the division of integers now returns float.

What are decorators and what is their usage?
According to Bruce Eckel’s Introduction to Python Decorators “Decorators allow you to inject or modify code in functions or classes”. In other words decorators allow you to wrap a function or class method call and execute some code before or after the execution of the original code. And also you can nest them e.g. to use more than one decorator for a specific function. Usage examples include – logging the calls to specific method, checking for permission(s), checking and/or modifying the arguments passed to the method etc.

The with statement and its usage.
In a few words the with statement allows you to executed code before and/or after a specific set of operations. For example if you open a file for reading and parsing no matter what happens during the parsing you want to be sure that at the end the file is closed. This is normally achieved using the try… finally construction but the with statement simplifies it usin the so called “context management protocol”. To use it with your own objects you just have to define __enter__ and __exit__ methods. Some standard objects like the file object automatically support this protocol. For more information you may check Understanding Python’s “with” statement.



__slots__
he proper use of __slots__ is to save space in objects. Instead of having a dynamic dict that allows adding attributes to objects at anytime, there is a static structure which does not allow additions after creation. This saves the overhead of one dict for every object that uses slots. While this is sometimes a useful optimization, it would be completely unnecessary if the Python interpreter was dynamic enough so that it would only require the dict when there actually were additions to the object.