Tasty Pie
For the purpose of this tutorial we will create a simple todo list application. Use manage.py to do so: 'python manage.py startapp todolist'. Add the app to the INSTALLED_APPS in settings.py. Let's now build some models:

from django.db import models
from django.contrib.auth.models import User

class TodoList(models.Model):
name = models.CharField('List Title', max_length=200)
author = models.ForeignKey(User, related_name='todo_lists')
 
class TodoItem(models.Model):
text = models.TextField('Item Text')
todo_list = models.ForeignKey(TodoList, related_name='items')


For the above models this is how we create te resources:
Let's finally arrive to the TastyPie part. Create a file "api.py" inside todolist app, and let's create some REST resources:

from tastypie.resources import ModelResource
from .models import TodoList, TodoItem


class TodoListResource(ModelResource):
	class Meta:
		queryset = TodoList.objects.all()
		resource_name = 'list'


class TodoItemResource(ModelResource):
	class Meta:
		queryset = TodoItem.objects.all()
		resource_name = 'item'
Now that we have the resources, we have to create an API and create an url pattern for it. Let's go to urls.py from the project folder:

from django.conf.urls import patterns, include, url
 
from django.contrib import admin
admin.autodiscover()
 
 
from tastypie.api import Api
from todolist.api import TodoItemResource, TodoListResource
 
v1_api = Api(api_name='v1')
v1_api.register(TodoListResource())
v1_api.register(TodoItemResource())
 
urlpatterns = patterns('',
# Examples:
# url(r'^$', 'tptutorial.views.home', name='home'),
# url(r'^blog/', include('blog.urls')),
 
url(r'^admin/', include(admin.site.urls)),
url(r'^api/', include(v1_api.urls)),
)

Use  authentication = SessionAuthentication() within the the resource Meta to get the django authentication activated.

from tastypie.authorization import Authorization
from tastypie.exceptions import Unauthorized

Let's get into Authorization and create a file inside the app named "api_authorization.py
class AuthorizationByUser(Authorization):

    def read_list(self, object_list, bundle):
        return object_list.filter(author=bundle.request.user)

    def read_detail(self, object_list, bundle):
        return bundle.obj.author == bundle.request.user

    def create_list(self, object_list, bundle):
        raise Unauthorized('Can\'t create lists')

    def create_detail(self, object_list, bundle):
        return Unauthorized('Can\'t create lists')

    def update_list(self, object_list, bundle):
        return Unauthorized('Can\'t update lists')

    def update_detail(self, object_list, bundle):
        return Unauthorized('Can\'t update lists')

    def delete_list(self, object_list, bundle):
        raise Unauthorized("Sorry, no deletes.")

    def delete_detail(self, object_list, bundle):
        raise Unauthorized("Sorry, no deletes.")

Let's hook that authorization model with the resource:
class TodoListResource(ModelResource):
class Meta:
authentication = SessionAuthentication()
authorization = AuthorizationByUser()
queryset = TodoList.objects.all()
resource_name = 'list'



**From the Basics again**

Creating resources:
from tastypie.resources import ModelResource
from myapp.models import Entry


class EntryResource(ModelResource):
    class Meta:
        queryset = Entry.objects.all()
        resource_name = 'entry'



Hookng up the rewources:
# urls.py
from django.conf.urls.defaults import *
from myapp.api import EntryResource

entry_resource = EntryResource()

urlpatterns = patterns('',
    # The normal jazz here...
    (r'^blog/', include('myapp.urls')),
    (r'^api/', include(entry_resource.urls)),
)


All below work

http://127.0.0.1:8000/api/entry/?format=json
http://127.0.0.1:8000/api/entry/1/?format=json
http://127.0.0.1:8000/api/entry/schema/?format=json
http://127.0.0.1:8000/api/entry/set/1;3/?format=json
However, if you try sending a POST/PUT/DELETE to the resource, you find yourself getting “401 Unauthorized” errors. For safety, Tastypie ships with the authorization class  set to ReadOnlyAuthorization. This makes it safe to expose on the web, but prevents us from doing POST/PUT/DELETE. Let’s enable those:



Adding additional resources:
In order to handle our user relation, we’ll need to create a UserResource and tell the EntryResource to use it. So we’ll modify myapp/api.py to match the following code:

# myapp/api.py
from django.contrib.auth.models import User
from tastypie import fields
from tastypie.resources import ModelResource
from myapp.models import Entry


class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'user'


class EntryResource(ModelResource):
    user = fields.ForeignKey(UserResource, 'user')	'''We simply created a new ModelResource subclass called UserResource. Then we added a field to EntryResource that specified that the user field points to a UserResource for that data'''

    class Meta:
        queryset = Entry.objects.all()
        resource_name = 'entry'


Tastypie ships with an Api class, which lets you bind multiple Resources together to form a coherent API. Adding it to the mix is simple.

v1_api = Api(api_name='v1')
v1_api.register(UserResource())
v1_api.register(EntryResource())

urlpatterns = patterns('',
    # The normal jazz here...
    (r'^blog/', include('myapp.urls')),
    (r'^api/', include(v1_api.urls)),
)


Limiting Data and access by including excludes in MEta
class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'user'
        excludes = ['email', 'password', 'is_active', 'is_staff', 'is_superuser']

class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'user'
        excludes = ['email', 'password', 'is_active', 'is_staff', 'is_superuser']
        allowed_methods = ['get']

Now only HTTP GET requests will be allowed on /api/v1/user/ endpoints. If you require more granular control, both list_allowed_methods and detail_allowed_methods options are supported


*Interacting with the API*

Filtering can be restricted  as below under Meta:
    filtering = {
            'user': ALL_WITH_RELATIONS,
            'pub_date': ['exact', 'lt', 'lte', 'gte', 'gt'],
        }

 curl http://localhost:8000/rango/api/v1/ lists below:
 {"entry": {"list_endpoint": "/rango/api/v1/entry/", "schema": "/rango/api/v1/entry/schema/"}, "user": {"list_endpoint": "/rango/api/v1/user/", "schema": "/rango/api/v1/user/schema/"}}
 This lists out all the different Resource classes you registered in your URLconf with the API. Each one is listed by the resource_name you gave it and provides the list_endpoint & the schema for the resource

 Below command gives the complete schema details:

 curl http://localhost:8000/api/v1/entry/schema/

When we hit list_endpoint like the one listed bwlow:
curl http://localhost:8000/api/v1/entry/
data looks like:
{
    "meta": {
        "limit": 20,
        "next": null,
        "offset": 0,
        "previous": null,
        "total_count": 3
    },
    "objects": [{
        "body": "Welcome to my blog!",
        "id": "1",
        "pub_date": "2011-05-20T00:46:38",
        "resource_uri": "/api/v1/entry/1/",
        "slug": "first-post",
        "title": "First Post",
        "user": "/api/v1/user/1/"
    },
    {
        "body": "Well, it's been awhile and I still haven't updated. ",
        "id": "2",
        "pub_date": "2011-05-21T00:46:58",
        "resource_uri": "/api/v1/entry/2/",
        "slug": "second-post",
        "title": "Second Post",
        "user": "/api/v1/user/1/"
    }]}



        By default, you get a paginated set of objects (20 per page is the default).
        In the meta, you get a previous & next. If available, these are URIs to the previous & next pages.
        You get a list of resources/objects under the objects key.
        Each resources/object has a resource_uri field that points to the detail view for that object.
        The foreign key to User is represented as a URI by default. If you’re looking for the full UserResource to be embedded in this view, you’ll need to add full=True to the fields.ToOneField.

If you want to skip paginating, simply run:curl http://localhost:8000/api/v1/entry/?limit=0

Let’s try filtering on the resource. Since we know we can filter on the user, we’ll fetch all posts by the daniel user with:
curl http://localhost:8000/api/v1/entry/?user__username=daniel

*Sometimes you may want back more than one record, but not an entire list view nor do you want to do multiple requests. Tastypie includes a “set” view, which lets you cherry-pick the objects you want. For example, if we just want the first & third Entry resources, we’d run:
curl "http://localhost:8000/api/v1/entry/set/1;3/"

HTTP: 201 POst successsful
curl --dump-header - -H "Content-Type: application/json" -X POST --data '{"body": "This will prbbly be my lst post.", "pub_date": "2011-05-22T00:46:38", "slug": "another-post", "title": "Another Post"}' http://localhost:8000/api/v1/entry/

HTTP:204 PUT Successful -- i,e modify existing resource successful
curl --dump-header - -H "Content-Type: application/json" -X PUT --data '{"body": "This will probably be my last post.", "pub_date": "2011-05-22T00:46:38", "slug": "another-post", "title": "Another Post", "user": "/api/v1/user/1/"}' http://localhost:8000/api/v1/entry/4/

HTTP:202 PATCH Successful - i.e modify existing resouce partially 
curl --dump-header - -H "Content-Type: application/json" -X PATCH --data '{"body": "This actually is my last post."}' http://localhost:8000/api/v1/entry/4/


You can also, in rare circumstances, update an entire collection of objects. By sending a PUT request to the list view of a resource, you can replace the entire collection.

curl --dump-header - -H "Content-Type: application/json" -X PUT --data '{"objects": [{"body": "Welcome to my blog!","id": "1","pub_date": "2011-05-20T00:46:38","resource_uri": "/api/v1/entry/1/","slug": "first-post","title": "First Post","user": "/api/v1/user/1/"},{"body": "I'm really excited to get started with this new blog. It's gonna be great!","id": "3","pub_date": "2011-05-20T00:47:30","resource_uri": "/api/v1/entry/3/","slug": "my-blog","title": "My Blog","user": "/api/v1/user/2/"}]}' http://localhost:8000/api/v1/entry/



*What Are Bundles?

Bundles are a small abstraction that allow Tastypie to pass data between resources. This allows us not to depend on passing request to every single method (especially in places where this would be overkill). It also allows resources to work with data coming into the application paired together with an unsaved instance of the object in question. Finally, it aids in keeping Tastypie more thread-safe.
Think of it as package of user data & an object instance (either of which are optionally present).

*API
In terms of a REST-style architecture, the “api” is a collection of resources. In Tastypie, the Api gathers together the Resources & provides a nice way to use them as a set



*CAching*

class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'auth/user'
        excludes = ['email', 'password', 'is_superuser']
        # Add it here.
        cache = SimpleCache(cache_name="resource",timeout=10)


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'TIMEOUT': 60
    },
    'resources': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'TIMEOUT': 60
    }




*Validation*
class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'auth/user'
        excludes = ['email', 'password', 'is_superuser']
        # Add it here.
        validation = Validation()

You can even override the above Validation class and define ur own validation by accessign bundle objects.

class AwesomeValidation(Validation):
    def is_valid(self, bundle, request=None):
        if not bundle.data:
            return {'__all__': 'Not quite what I had in mind.'}

        errors = {}

        for key, value in bundle.data.items():
            if not isinstance(value, basestring):
                continue

            if not 'awesome' in value:
                errors[key] = ['NOT ENOUGH AWESOME. NEEDS MORE.']

        return errors

*Authentication*
Authentication is the component needed to verify who a certain user is and to validate their access to the API
class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'auth/user'
        excludes = ['email', 'password', 'is_superuser']
        # Add it here.
        authentication = BasicAuthentication()

This authentication scheme uses HTTP Basic Auth to check a user’s credentials. The username is their django.contrib.auth.models.User username (assuming it is present) and their password should also correspond to that entry

DigestAuthentication

This authentication scheme uses HTTP Digest Auth to check a user’s credentials. The username is their django.contrib.auth.models.User username (assuming it is present) and their password should be their machine-generated api key. As with ApiKeyAuthentication, tastypie should be included in INSTALLED_APPS.
OAuthAuthentication
Handles OAuth, which checks a user’s credentials against a separate service. Currently verifies against OAuth 1.0a services.


*Authorization is the component needed to verify what someone can do with the resources within an API.

ReadOnlyAuthorization

This authorization class only permits reading data, regardless of what the Resource might think is allowed. This is the default Authorization class and the safe option.
DjangoAuthorization

The most advanced form of authorization, this checks the permission a user has granted to them (via django.contrib.auth.models.Permission). In conjunction with the admin, this is a very effective means of control


*Serialization*
Setting serialization as below
class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'auth/user'
        excludes = ['email', 'password', 'is_superuser']
        serializer = Serializer(formats=['json', 'plist'])


*Throttling

Sometimes, the client on the other end may request data too frequently or you have a business use case that dictates that the client should be limited to a certain number of requests per hour.

class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        resource_name = 'auth/user'
        excludes = ['email', 'password', 'is_superuser']
        # Add it here.
        throttle = BaseThrottle(throttle_at=100)

    throttle_at - the number of requests at which the user should be throttled. Default is 150 requests.
    timeframe - the length of time (in seconds) in which the user make up to the throttle_at requests. Default is 3600 seconds ( 1 hour).
    expiration - the length of time to retain the times the user has accessed the api in the cache. Default is 604800 (1 week).



*Dehydrate:
You might encounter cases where you wish to include additional data in a response which is not obtained from a field or method on your model. You can easily extend the dehydrate() method to provide additional values:

class MyModelResource(Resource):
    class Meta:
        qs = MyModel.objects.all()

    def dehydrate(self, bundle):
        bundle.data['custom_field'] = "Whatever you want"
        return bundle

